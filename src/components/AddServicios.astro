---
import { lucia } from "../auth";
import { db, CustomDataTable, eq, User } from "astro:db";
const { id } = Astro.params;

const sessionCookie = Astro.cookies.get(lucia.sessionCookieName);
const session = sessionCookie ? await lucia.validateSession(sessionCookie.value) : null;
const user = session?.user || null;

const services = await db
  .select()
  .from(CustomDataTable)
  .where(eq(CustomDataTable.id, CustomDataTable.id))
  .execute();

const bootstrapIcons = [
  'bi-house-door',
  'bi-truck',
  'bi-gear',
  'bi-bicycle',
  'bi-basket',
  'bi-bell',
  'bi-briefcase',
  'bi-calendar',
  'bi-camera',
  'bi-cart',
  'bi-cloud',
  'bi-pencil',
];
---

<div>
  {user ? (
    <div class="mt-6 px-4 lg:px-8">
      <h3 class="text-xl font-semibold mb-4">Acciones Disponibles</h3>
      <form
        method="POST"
        action="/api/push"
        class="flex flex-col items-start space-y-4"
        onsubmit="handleSubmitService(event)"
      >
        <label for="customData" class="text-sm font-medium">
          Ingrese datos adicionales para enviar:
        </label>
        <input
          type="text"
          id="customData"
          name="customData"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5"
          placeholder="Tipo de servicio"
          required
        />
        <input
          type="text"
          id="customTitle"
          name="customTitle"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5"
          placeholder="Titulo del servicio"
          required
        />
        <input
          type="text"
          id="customDescription"
          name="customDescription"
          class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5"
          placeholder="Descripción del servicio"
          required
        />
       <div class="relative">
  <label for="customIcon" class="text-sm font-medium">Selecciona un ícono:</label>
  <div class="custom-dropdown bg-gray-50 border border-gray-300 rounded-lg w-full">
    <div
      id="selectedIcon"
      class="selected-icon flex items-center justify-between px-4 py-2 cursor-pointer"
      onclick="toggleDropdown()"
    >
      <span>Seleccione un ícono</span>
      <i class="bi bi-caret-down-fill"></i>
    </div>
    <ul id="iconList" class="dropdown-list hidden max-h-48 overflow-auto">
      {bootstrapIcons.map((icon) => (
        <li
          data-value={icon}
          onclick="selectIcon(event)"
          class="dropdown-item flex items-center px-4 py-2 hover:bg-gray-100 cursor-pointer"
        >
          <i class={`bi ${icon} text-xl mr-2`}></i>
          <span>{icon}</span>
        </li>
      ))}
    </ul>
  </div>
  <input type="hidden" id="customIcon" name="customIcon" value="" required />
</div>
        <button
          type="submit"
          class="text-white bg-pink-600 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5"
        >
          Enviar
        </button>
        <div class="create-message"></div>
      </form>
    </div>
  ) : (
    <div class="mt-6 px-4 lg:px-8">
      <p class="text-sm text-gray-500">
        <a href="/signin" class="text-primary-600 hover:underline">
          Inicie sesión
        </a>{" "}
        para acceder a más funciones.
      </p>
    </div>
  )}
</div>

<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
  {services.length > 0 ? (
    services.map((service) => (
      <div class="bg-white shadow-md rounded-lg p-4" data-key={service.id}>
            <form
              method="POST"
              action="/api/delete-service"
              onsubmit="return handleDeleteService(event)"
              class="inline"
            >
        <div class="items-center text-center space-y-3">
          <i class={`bi ${service.icon} text-5xl`}></i>
          <h5 class="text-lg font-medium">{service.title}</h5>
          <p class="text-sm font-medium opacity-75">{service.description}</p>

          <div class="flex justify-center items-center space-x-4 mt-2">
            <a href={`/api/update`} class="text-blue-600 hover:underline">
              Editar
            </a>

              <input type="hidden" name="serviceId" value={service.id} />
              <button
                type="submit"
                class="text-red-600 hover:underline"
              >
                Eliminar
              </button>
          </div>
          <div class="delete-message"></div>

        </form>

        </div>
      </div>
    ))
  ) : (
    <p>No hay servicios disponibles.</p>
  )}
</div>

<script is:inline>
  async function handleSubmitService(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);

    // Enviar la solicitud de creación
    const response = await fetch(form.action, {
      method: form.method,
      body: formData,
    });

    const result = await response.json();
    const messageDiv = form.querySelector('.create-message');

    if (response.ok) {
      // Si la creación fue exitosa
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-green-600');
      form.reset();

      // Retrasar la recarga de la página por 2 segundos
      setTimeout(() => {
        location.reload();  // Recarga la página
      }, 800);  // Retraso de 2 segundos
    } else {
      // Si hubo un error en la creación
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-red-600');
    }
    
  }
  async function handleDeleteService(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);

    // Enviar la solicitud de eliminación
    const response = await fetch(form.action, {
      method: form.method,
      body: formData,
    });

    const result = await response.json();
    const messageDiv = form.querySelector('.delete-message');

    if (response.ok) {
      // Si la eliminación fue exitosa
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-green-600');
      form.querySelector('button[type="submit"]').disabled = true;

      // Retrasar la recarga de la página por 2 segundos
      setTimeout(() => {
        location.reload();  // Recarga la página
      }, 1500);  // Retraso de 2 segundos
    } else {
      // Si hubo un error en la eliminación
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-red-600');
    }
  }

  function toggleDropdown() {
    const dropdownList = document.getElementById("iconList");
    dropdownList.classList.toggle("hidden");
  }

  function selectIcon(event) {
    const selectedValue = event.currentTarget.getAttribute("data-value");
    const selectedIconText = event.currentTarget.querySelector("span").textContent;
    const selectedIconElement = event.currentTarget.querySelector("i").outerHTML;

    document.getElementById("selectedIcon").innerHTML = `
      ${selectedIconElement} ${selectedIconText}
      <i class="bi bi-caret-down-fill ml-auto"></i>
    `;
    document.getElementById("customIcon").value = selectedValue;

    toggleDropdown(); // Close the dropdown after selecting
  }
</script>
