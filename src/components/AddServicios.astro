---
import { lucia } from "../auth";
import { db, CustomDataTable, eq } from "astro:db";
const { id } = Astro.params;

const sessionCookie = Astro.cookies.get(lucia.sessionCookieName);
const session = sessionCookie ? await lucia.validateSession(sessionCookie.value) : null;
const user = session?.user || null;

const services = await db
  .select()
  .from(CustomDataTable)
  .where(eq(CustomDataTable.id, CustomDataTable.id))
  .execute();

const bootstrapIcons = [
  'bi-house-door',
  'bi-truck',
  'bi-gear',
  'bi-bicycle',
  'bi-basket',
  'bi-bell',
  'bi-briefcase',
  'bi-calendar',
  'bi-camera',
  'bi-cart',
  'bi-cloud',
  'bi-pencil',
  'bi-credit-card',
  'bi-cup',
  'bi-envelope',
  'bi-eye',
  'bi-car-front',
  'bi-gift',
  'bi-headset',
  'bi-heart',
  'bi-house',
  'bi-lightbulb',
  'bi-music-note',
  'bi-pen',
  'bi-phone',
  'bi-printer',
  'bi-shield',
  'bi-suit-heart',
  'bi-tv',
  'bi-watch',
  'bi-wifi',
  'bi-window',
  'bi-wrench',
  'bi-alarm',
  'bi-award',
  'bi-bank',
  'bi-bell-fill',
  'bi-book',
];

---
<div class="bg-black w-full py-12 text-white">
  <div class="container mx-auto px-4 max-w-screen-xl">
    <h1 class="text-4xl">Dashboard Servicios</h1>
    {user ? (
      <div class="px-4 lg:px-8">
        <h3 class="text-xl font-semibold mb-4">Añadir Servicios</h3>

        <form
          method="POST"
          action="/api/push"
          class="flex flex-col items-start space-y-4"
          onsubmit="handleSubmitService(event)"
        >
          <label for="customData" class="text-sm font-medium">
            Ingrese datos adicionales para enviar:
          </label>
          <input
            type="text"
            id="customTitle"
            name="customTitle"
            class="bg-gray-900 border border-gray-300 text-white sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5"
            placeholder="Titulo del servicio"
            required
          />
        <textarea
          id="customDescription"
          name="customDescription"
          class="bg-black text-white sm:text-lg rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5"
          placeholder="Descripción del servicio"
          required
        ></textarea>
          <div class="relative">
            <label for="customIcon" class="text-sm font-medium">Selecciona un ícono:</label>
            <div class="custom-dropdown bg-gray-900 border border-gray-300 rounded-lg w-full">
              <div
                id="selectedIcon"
                class="selected-icon flex items-center justify-between px-4 cursor-pointer"
                onclick="toggleDropdown()"
              >
                <span>Seleccione un ícono</span>
                <i class="bi bi-caret-down-fill"></i>
              </div>
              <ul id="iconList" class="dropdown-list hidden max-h-48 overflow-auto">
                {bootstrapIcons.map((icon) => (
                  <li
                    data-value={icon}
                    onclick="selectIcon(event)"
                    class="dropdown-item flex items-center px-4 hover:bg-gray-800 cursor-pointer"
                  >
                    <i class={`bi ${icon} text-xl mr-2`}></i>
                    <span>{icon}</span>
                  </li>
                ))}
              </ul>
            </div>
            <input type="hidden" id="customIcon" name="customIcon" value="" required />
          </div>
          <button
            type="submit"
            class="text-white bg-[#CA8A04] hover:bg-[#886a2a] py-2 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5"
          >
            Añadir Servicio
          </button>
          <div class="create-message"></div>
        </form>
      </div>
<div class="bg-black">
<div class="bg-black w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 px-4 max-w-screen-lg mx-auto">
  {services.length > 0 ? (
    services.map((service) => (
      <div class="bg-black py-4 px-4" data-key={service.id}>
        <form
          method="POST"
          action="/api/delete-service"
          onsubmit="return handleDeleteService(event)"
          class="inline"
        >
          <div class="items-center text-center space-y-3">
            <i class={`bi ${service.icon} text-5xl text-white`}></i>
            <h5 class="text-lg font-medium text-white">{service.title}</h5>
            <p class="text-sm font-medium text-gray-300" set:html={service.description}></p>

            <div class="flex justify-center items-center space-x-4 mt-2">
              <a href="/dashboard" aria-roledescription="por hacer" class="text-blue-600 hover:underline">
                Editar
              </a>

              <input type="hidden" name="serviceId" value={service.id} />
              <button
                type="submit"
                class="text-red-600 hover:underline"
              >
                Eliminar
              </button>
            </div>
            <div class="delete-message"></div>
          </div>
        </form>
      </div>
    ))
  ) : (
    <p class="text-white w-full max-h-screen">No hay servicios disponibles.</p>
  )}
</div>
</div>
    ) : (
      <div class="mt-6 px-4 lg:px-8">
        <p class="text-sm text-gray-500">
          <a href="/signin" class="text-primary-600 hover:underline">
            Inicie sesión
          </a>{" "}
          para acceder a más funciones.
        </p>
      </div>
    )}
  </div>
  <script is:inline src="https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.umd.js"></script>


  <script>
              const {
                ClassicEditor,
                Essentials,
                Bold,
                Italic,
                Font,
                Paragraph,
                FontFamily,
                FontColor,
                FontBackgroundColor,
            } = CKEDITOR;
            import '/public/custom.css'
            ClassicEditor
                .create( document.querySelector( '#customDescription' ), {
                    licenseKey: 'eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE3Njc3NDM5OTksImp0aSI6IjBlZDBjOTg4LWJmM2QtNGM2NC05ZWM1LWYzNWM1MmI3ZmE3OSIsImxpY2Vuc2VkSG9zdHMiOlsiMTI3LjAuMC4xIiwibG9jYWxob3N0IiwiMTkyLjE2OC4qLioiLCIxMC4qLiouKiIsIjE3Mi4qLiouKiIsIioudGVzdCIsIioubG9jYWxob3N0IiwiKi5sb2NhbCJdLCJ1c2FnZUVuZHBvaW50IjoiaHR0cHM6Ly9wcm94eS1ldmVudC5ja2VkaXRvci5jb20iLCJkaXN0cmlidXRpb25DaGFubmVsIjpbImNsb3VkIiwiZHJ1cGFsIl0sImxpY2Vuc2VUeXBlIjoiZGV2ZWxvcG1lbnQiLCJmZWF0dXJlcyI6WyJEUlVQIl0sInZjIjoiOGNjMjMzY2UifQ._ReihK7ooewIqpjn91mZMts9eRzqOtUk8l-E3sp-AeMHAtQn_VBSVPVpMlU6qKc39m8WVs3rwjjUe_k_9rDkKw',
                    plugins: [ Essentials, Bold, Italic, Font, Paragraph, FontFamily, FontColor, FontBackgroundColor ],
                    toolbar: [
                'undo', 'redo', '|', 'bold', 'italic', '|',
                'fontSize', 'fontFamily', 'fontColor', '|', 
                'link', 'blockQuote', 'alignment'
            ],
            
                } )
  .then(editor => {
    editor.model.document.on('change:data', () => {
      // Sincroniza el contenido con el campo oculto
      document.getElementById('customDescription').value = editor.getData();
    });
  })
  .catch(error => {
    console.error(error);
  });
  </script>
<style>
  /* Estilo global para el contenedor del editor */
  @media (max-width: 768px) {
    #customDescription {
      min-height: 150px; /* Puedes ajustar la altura mínima */
    }
  }

  .ck-editor__editable {
      background-color: #000000; /* Fondo negro */
      color: #ffffff; /* Texto blanco */
      min-height: 200px; /* Mínima altura para el área editable */
      padding: 15px;
      width: 100%; /* Asegura que ocupe todo el ancho del contenedor */
  }

  .ck-toolbar {
      background-color: #333333; /* Fondo oscuro para la barra de herramientas */
      color: #ffffff; /* Texto blanco */
      border-bottom: 1px solid #444444;
  }

  .ck-button {
      background-color: #333333; /* Fondo oscuro de los botones */
      color: #ffffff; /* Texto blanco */
  }

  .ck-button:hover {
      background-color: #444444;
  }

  .ck-button:active {
      background-color: #555555;
  }

  /* Ajuste de la barra de herramientas para pantallas más pequeñas */
  @media (max-width: 768px) {
      .ck-toolbar {
          flex-wrap: auto;
      }
  }
</style>
<script is:inline>
  async function handleSubmitService(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);

    // Enviar la solicitud de creación
    const response = await fetch(form.action, {
      method: form.method,
      body: formData,
    });

    const result = await response.json();
    const messageDiv = form.querySelector('.create-message');

    if (response.ok) {
      // Si la creación fue exitosa
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-green-600');
      form.reset();

      // Retrasar la recarga de la página por 2 segundos
      setTimeout(() => {
        location.reload();  // Recarga la página
      }, 800);  // Retraso de 2 segundos
    } else {
      // Si hubo un error en la creación
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-red-600');
    }
    
  }
  async function handleDeleteService(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);

    // Enviar la solicitud de eliminación
    const response = await fetch(form.action, {
      method: form.method,
      body: formData,
    });

    const result = await response.json();
    const messageDiv = form.querySelector('.delete-message');

    if (response.ok) {
      // Si la eliminación fue exitosa
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-green-600');
      form.querySelector('button[type="submit"]').disabled = true;

      // Retrasar la recarga de la página por 2 segundos
      setTimeout(() => {
        location.reload();  // Recarga la página
      }, 1500);  // Retraso de 2 segundos
    } else {
      // Si hubo un error en la eliminación
      messageDiv.textContent = result.message;
      messageDiv.classList.add('text-red-600');
    }
  }

  function toggleDropdown() {
    const dropdownList = document.getElementById("iconList");
    dropdownList.classList.toggle("hidden");
  }

  function selectIcon(event) {
    const selectedValue = event.currentTarget.getAttribute("data-value");
    const selectedIconText = event.currentTarget.querySelector("span").textContent;
    const selectedIconElement = event.currentTarget.querySelector("i").outerHTML;

    document.getElementById("selectedIcon").innerHTML = `
      ${selectedIconElement} ${selectedIconText}
      <i class="bi bi-caret-down-fill ml-auto"></i>
    `;
    document.getElementById("customIcon").value = selectedValue;

    toggleDropdown(); // Close the dropdown after selecting
  }
</script>

